<?xml version="1.0"?>
<launch>

    <!-- Arguments -->
    <arg name="world_name" default="race_track.world"/>
    <arg name="debug" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="verbose" default="false"/>
    <arg name="custom_models" default="$(find forgetful_drones)/gazebo/models"/>

    <arg name="quad_name" default="hummingbird"/>
    <arg name="model" default="hummingbird_rgbcamera300200.gazebo"/>
    <arg name="enable_logging" default="false"/>
    <arg name="enable_ground_truth" default="true"/>
    <arg name="x_init" default="0.0"/>
    <arg name="y_init" default="22.0"/>
    
    <arg name="enable_command_feedthrough" default="true"/>
    
    <env name="GAZEBO_MODEL_PATH"       
        value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(arg custom_models)"/>
    <env name="GAZEBO_RESOURCE_PATH"    
        value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>



    <!-- Spawn the world in Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find forgetful_drones)/resources/Gazebo/worlds/$(arg world_name)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    

    
    <group ns="$(arg quad_name)">

        <!-- Spawn the drone in Gazebo -->
        <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
            <arg name="mav_name" value="$(arg quad_name)" />
            <arg name="model" value="$(find forgetful_drones)/resources/simulation/vehicles/$(arg model)" />
            <arg name="enable_logging" value="$(arg enable_logging)" />
            <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
            <arg name="log_file" value="$(arg quad_name)"/>
            <arg name="x" value="$(arg x_init)" />
            <arg name="y" value="$(arg y_init)" />
        </include>

        <!-- RPG RotorS Interface -->
        <node pkg="rpg_rotors_interface" type="rpg_rotors_interface"
                name="rpg_rotors_interface" output="screen" >
            <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
            <remap from="odometry" to="ground_truth/odometry" />
            <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
        </node>

        <!-- Autopilot -->
        <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
            <rosparam file="$(find state_predictor)/parameters/hummingbird.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
            <param name="position_controller/use_rate_mode" value="True" />
            <param name="velocity_estimate_in_world_frame" value="false" />
            <param name="state_estimate_timeout" value="0.1" />
            <param name="control_command_delay" value="0.05" />
            <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
            <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
        </node>

        <!-- Joy -->
        <node pkg="joy" type="joy_node" name="joy_node">
            <param name="autorepeat_rate" value="10"/>
        </node>

        <!-- Manual Flight Assistant -->
        <node pkg="manual_flight_assistant" type="manual_flight_assistant"
                name="manual_flight_assistant" output="screen">
            <rosparam file="$(find rpg_rotors_interface)/parameters/manual_flight_assistant.yaml"/>
        </node>

        <!-- Robot and Joint State Publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

        <!-- Forgetful Drones -->
        <node pkg="forgetful_drones" type="forgetful_drones_node" name="forgetful_drones_node" output="screen"
                args="--nav_mode data_collection">
            <remap from="image_rgb" to="/$(arg quad_name)/rgb_camera/camera_1/image_raw"/>
            <remap from="camera_info" to="/$(arg quad_name)/vi_sensor_1/camera_depth/depth/camera_info"/>
            <remap from="state_estimate" to="odometry_sensor1/odometry"/>
            <rosparam file="$(find forgetful_drones)/parameters/main.yaml"/>
            <rosparam file="$(find forgetful_drones)/parameters/goals.yaml"/>
            <param name="root_dir" value="$(find forgetful_drones)/data/Training"/>
            <param name="trajectory_path" value="$(find forgetful_drones)/resources/global_trajectories"/>
            <param name="quad_frame" value="/hummingbird/base_link"/>
            <param name="navigation_mode" value="true">
        </node>
    
    </group>


    <!-- RVIZ -->
    <group>
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find forgetful_drones)/resources/rviz/race_track.rviz"/>
    </group>

</launch>



<!-- TO DO: custom_models to general, GAZEBO_MODEL_PATH, GAZEBO_RESSOURCE_PATH, own world, own x_init,
check if joy, manual flight assitent and robot joint state publisher can be removed, own rviz config,

navigation mode = datacollection, testing, global traj,  integrate in cpp, own launch file only with that parameter-->
