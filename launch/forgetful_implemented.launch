<?xml version="1.0"?>
<launch>

    <!-- Arguments -->
    <arg name="debug" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="gui" default="false"/>
    <arg name="verbose" default="false"/>

    <arg name="quad_name" default="hummingbird"/>
    <arg name="model" default="$(find forgetful_drones)/gazebo/models/drone/vehicles/hummingbird_rgbcamera300200.gazebo"/>
    <arg name="enable_logging" default="false"/>
    <arg name="enable_ground_truth" default="true"/>
    <arg name="enable_mavlink_interface" default="false"/>
    <arg name="wait_to_record_bag" default="false"/>
    <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>

    <arg name="enable_command_feedthrough" default="true"/>

    <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find forgetful_drones)/gazebo/models"/>
    <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>

    <!-- Spawn empty world in Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!--<arg name="world_name" value="$(find drone_racing)/resources/worlds/race_track.world" />-->
        <arg name="world_name" value="$(find forgetful_drones)/gazebo/worlds/rotorS.world" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="verbose" value="$(arg verbose)"/>
    </include>

    

    
    <group ns="$(arg quad_name)">

        <!-- Spawn the drone in Gazebo -->
        <!-- send the robot XML to param server -->
        <param name="robot_description" command="
            $(find xacro)/xacro '$(arg model)'
            enable_logging:=$(arg enable_logging)
            enable_ground_truth:=$(arg enable_ground_truth)
            enable_mavlink_interface:=$(arg enable_mavlink_interface)
            log_file:=$(arg quad_name)
            wait_to_record_bag:=$(arg wait_to_record_bag)
            mav_name:=$(arg quad_name)
            namespace:=$(arg quad_name)"
        />
        <!--<param name="tf_prefix" type="string" value="$(arg tf_prefix)" />-->



        <!-- RPG RotorS Interface -->
        <node pkg="rpg_rotors_interface" type="rpg_rotors_interface" name="rpg_rotors_interface" output="screen" >
            <rosparam file="$(find rpg_rotors_interface)/parameters/rpg_rotors_interface.yaml" />
            <remap from="odometry" to="ground_truth/odometry" />
            <remap from="rpg_rotors_interface/arm" to="bridge/arm" />
        </node>

        <!-- Autopilot -->
        <node pkg="autopilot" type="autopilot" name="autopilot" output="screen">
            <rosparam file="$(find state_predictor)/parameters/hummingbird.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/position_controller.yaml" />
            <rosparam file="$(find rpg_rotors_interface)/parameters/autopilot.yaml" />
            <param name="position_controller/use_rate_mode" value="True" />
            <param name="velocity_estimate_in_world_frame" value="false" />
            <param name="state_estimate_timeout" value="0.1" />
            <param name="control_command_delay" value="0.05" />
            <param name="enable_command_feedthrough" value="$(arg enable_command_feedthrough)" />
            <remap from="autopilot/state_estimate" to="ground_truth/odometry" />
        </node>

        <!-- Joy -->
        <node pkg="joy" type="joy_node" name="joy_node">
            <param name="autorepeat_rate" value="10"/>
        </node>

        <!-- Manual Flight Assistant -->
        <node pkg="manual_flight_assistant" type="manual_flight_assistant"
                name="manual_flight_assistant" output="screen">
            <rosparam file="$(find rpg_rotors_interface)/parameters/manual_flight_assistant.yaml"/>
        </node>

        <!-- Robot and Joint State Publisher -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

        <!-- Forgetful Drones -->

        <!--
        <node pkg="forgetful_drones" type="forgetful_orchestrator_node" name="forgetful_orchestrator_node" output="screen">
            <rosparam file="$(find forgetful_drones)/parameters/forgetful_orchestrator.yaml" />
        </node>
        -->

        <node pkg="forgetful_drones" type="forgetful_simulator" name="forgetful_simulator" output="screen">
            <rosparam file="$(find forgetful_drones)/parameters/forgetful_simulator.yaml" />
            <param name="drone_model_description" command="
                $(find xacro)/xacro '$(arg model)'
                enable_logging:=$(arg enable_logging)
                enable_ground_truth:=$(arg enable_ground_truth)
                enable_mavlink_interface:=$(arg enable_mavlink_interface)
                log_file:=$(arg quad_name)
                wait_to_record_bag:=$(arg wait_to_record_bag)
                mav_name:=$(arg quad_name)
                namespace:=$(arg quad_name)"
            />
        </node>

        <node pkg="forgetful_drones" type="forgetful_drone" name="forgetful_drone" output="screen">
            <rosparam file="$(find forgetful_drones)/parameters/forgetful_drone.yaml" />
        </node>


        <!--
        <node pkg="forgetful_drones" type="forgetful_navigator_node" name="forgetful_navigator_node" output="screen">
            <rosparam file="$(find forgetful_drones)/parameters/forgetful_navigator.yaml" />
            <remap from="navigator/input" to="expert/prediction" />
            
                <remap from="odometry_sensor1/odometry" to="ground_truth/odometry" /> 
            
        </node>
        -->


        

        <!--
        <node pkg="forgetful_drones" type="forgetful_expert_node" name="forgetful_expert_node" output="screen">
            <rosparam file="$(find forgetful_drones)/parameters/forgetful_expert.yaml" />
        </node>
        -->

         <!--
        <node pkg="image_view" type="image_view" name="image_view_DroneFrontCam" output="screen" args="image:=/hummingbird/rgb_camera/camera_1/image_raw">
        </node>
        -->


        <!-- RVIZ -->
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find forgetful_drones)/rviz/race_track.rviz"/>
    
    </group>


    
</launch>

